type Subscribe {
  id: ID!
  email_name: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelSubscribeConnection {
  items: [Subscribe]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelSubscribeFilterInput {
  id: ModelIDInput
  email_name: ModelStringInput
  and: [ModelSubscribeFilterInput]
  or: [ModelSubscribeFilterInput]
  not: ModelSubscribeFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getSubscribe(id: ID!): Subscribe
  listSubscribes(filter: ModelSubscribeFilterInput, limit: Int, nextToken: String): ModelSubscribeConnection
}

input CreateSubscribeInput {
  id: ID
  email_name: String!
}

input UpdateSubscribeInput {
  id: ID!
  email_name: String
}

input DeleteSubscribeInput {
  id: ID
}

type Mutation {
  createSubscribe(input: CreateSubscribeInput!, condition: ModelSubscribeConditionInput): Subscribe
  updateSubscribe(input: UpdateSubscribeInput!, condition: ModelSubscribeConditionInput): Subscribe
  deleteSubscribe(input: DeleteSubscribeInput!, condition: ModelSubscribeConditionInput): Subscribe
}

input ModelSubscribeConditionInput {
  email_name: ModelStringInput
  and: [ModelSubscribeConditionInput]
  or: [ModelSubscribeConditionInput]
  not: ModelSubscribeConditionInput
}

type Subscription {
  onCreateSubscribe: Subscribe @aws_subscribe(mutations: ["createSubscribe"])
  onUpdateSubscribe: Subscribe @aws_subscribe(mutations: ["updateSubscribe"])
  onDeleteSubscribe: Subscribe @aws_subscribe(mutations: ["deleteSubscribe"])
}
